/**
 * A class to represent the logic of the game Gomoku
 * @author Noah Leibowitz
 */
public class GomokuSample {
  
  /** Stores a two dimensional array of ints to model a board */
  private int[][] board;
  
  /** Stores whether it is the black or white turn */
  private boolean blackTurn = true;
  
  /** Stores the exact length needed in a row to win */
  private int lengthToWin;
  
  /**
   * Constructor that initializes the fields
   * @param lengthToWin the exact length needed in a row to win
   * @param rows the row locations of the board
   * @param cols the column locations of the board
   */
  public GomokuSample(int lengthToWin, int rows, int cols) {
    board = new int[rows][cols];
    this.lengthToWin = lengthToWin;
  }
  
  /**
   * Constructor that initializes the fields
   * The length to win is default set to 5
   * @param rows the row locations of the board
   * @param cols the column locations of the board
   */
  public GomokuSample(int rows, int cols) {
    board = new int[rows][cols];
    lengthToWin = 5;
  }
  
  /**
   * Constructor that initializes the fields
   * The board size is set to the default 19x19 (indices 0-18)
   * @param lengthToWin the exact length needed in a row to win
   */
  public GomokuSample(int lengthToWin) {
    board = new int[19][19];
    this.lengthToWin = lengthToWin;
  }
  
  /** 
    * Default constructor that takes no inputs
    * The board size is set to the default 19x19
    * The length to win is set to 5
    */
  public GomokuSample() {
    board = new int[19][19];
    lengthToWin = 5;
  }
  
  /**
   * set the "color" of the piece
   * "Black" is assigned to "1" and "white" is assigned to "2"
   * @param row the row position of the piece
   * @param col the column position of the piece
   * @return true if the color (black or white) is placed, otherwise false if empty
   */
  public boolean setPiece(int row, int col) {
    if (board[row][col] != 0)
      return false;
    if(blackTurn)
      board[row][col] = 1;
    else if(!blackTurn)
      board[row][col] = 2;
    return true;
  }
  
  /**
   * Counts the number of pieces of the same color (1 or 2) in a row
   * @param row the row position of the piece
   * @param col the column position of the piece
   * @param dx the change in horizontal position
   * @param dy the change in the vertical position
   * @param color the color of this piece to be placed
   * @return the number of the same colored pieces that appear in a row (horizontally, vertically, or diagonally)
   */
  public int numberInLine(int row, int col, int dx, int dy, int color) {
    
    // Stores the number of pieces of the same color that appear in a row
    int count = 0;
    
    // Stores the change in horizontal position of the player
    int x = row + dx;
    
    // Stores the change in vertical position of the player
    int y = col + dy;
    while (x >= 0 && x < board.length && y >= 0 && y < board[0].length && board[x][y] == color) {
      count++;
      x += dx;
      y += dy;
    }
    return count;
  }
  
  /**
   * Determines if the amount in a row (horizontal, vertical, or diagonal) is exactly equal to the length needed to win
   * @param row the row position of the piece
   * @param col the column position of the piece
   * @return true if the player has won, otherwise false
   */
  public boolean hasWon(int row, int col) {
    
    /* Stores the color on the board of array of ints
     * Correctly assumes that the color has to be the same to win */
    int color = board[row][col];
    return numberInLine(row, col, 1, 0, color) + numberInLine(row, col, -1, 0, color) + 1 == lengthToWin
        || numberInLine(row, col, 0, 1, color) + numberInLine(row, col, 0, -1, color) + 1 == lengthToWin
        || numberInLine(row, col, 1, 1, color) + numberInLine(row, col, -1, -1, color) + 1 == lengthToWin
        || numberInLine(row, col, 1, -1, color) + numberInLine(row, col, -1, 1, color) + 1 == lengthToWin;
  }
  
  /** Switches the color of the piece to be placed */
  public void switchTurn() {
    blackTurn = !blackTurn;
  }
  
  /** 
   * Gets the board
   * @return the board
   */
  public int[][] getBoard() {
    return board;
  }
  
  /** 
   * Checks if this piece to be placed is the color black
    *@return true if it is black's turn or false if it is white's turn
    */
  public boolean isBlackTurn() {
    return blackTurn;
  }
  
  /**
   * Checks if the board is "empty"
   * "Empty" is assigned the int 0
   * @param row the row position of the location
   * @param col the column position of the location
   * @return true if empty, otherwise false
   */
  public boolean isEmpty(int row, int col) {
    return board[row][col] == 0;
  }
  
  /**
   * Checks if the Four-Four rule is violated
   * @param row the row position of the piece
   * @param col the column position of the piece
   * @return true if violated, otherwise false
   */
  public boolean violatesFourFour(int row, int col) {
    
    // Stores the color on the board of array of ints
    int color = board[row][col];
    
    // An array of ints to store the possible directions to move (horizontal, vertical, diagonal)
    int[] direction = {-1, 0, 1};
    
    // For-each loop to search through every direction on the entire two-dimensional array
    for (int dx : direction) {
        for (int dy : direction) {
          if (dx == 0 && dy == 0) 
            continue;
          int count = 1;
          int x = row + dx;
          int y = col + dy;
          count += numberInLine(x, y, dx, dy, color);
          x = row - dx;
          y = col - dy;
          count += numberInLine(x, y, -dx, -dy, color);
          if (count >= 4) {
            return true;
        }
      }
    }
    return false;
  }

 /**
   * Checks if the Three-Three rule is violated
   * @param row the row position of the piece
   * @param col the column position of the piece
   * @return true if violated, otherwise false
   */
  public boolean violatesThreeThree(int row, int col) {
    
    // Stores the color on the board of array of ints
    int color = board[row][col];
    
    // Keeps track of how many distinct groups of three there are
    int count = 0;
    
    // An array of ints to store the possible directions to move (horizontal, vertical, diagonal)
    int[] direction = {-1, 0, 1};
    
    // For-each loop to search through every direction on the entire two-dimensional array
    for (int dx : direction) {
      for (int dy : direction) {
        if (dx == 0 && dy == 0) 
          continue;
        int countThree = 1;
        int x = row + dx;
        int y = col + dy;
        countThree += numberInLine(x, y, dx, dy, color);
        x = row - dx;
        y = col - dy;
        countThree += numberInLine(x, y, -dx, -dy, color);
        if (countThree == 3) {
            count++;
        }
      }
    }
    return count >= 2;
  }

}